version: 2.1

executors:
  aws:
    docker:
      - image: amazon/aws-cli
  node:
    docker:
      - image: cimg/node:16.20.1
  python:
    docker:
      - image: python:3.10-alpine

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string

    steps:
      - run:
          name: Destroy backend CloudFormation stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-be-<< parameters.id >>
          when: << parameters.when >>
      - run:
          name: Destroy frontend CloudFormation stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-fe-<< parameters.id >>
          when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: << parameters.when >>
          command: |
            SUCCESS=$(curl https://kvdb.io/D3pG2H4NNFFoc5px1FoE9L/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if(( $SUCCESS ==1 )); 
            then
              npm run migrations:revert
            fi

jobs:

  setup-frontend:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build
          working_directory: ./frontend
          command: npm run build

  setup-backend:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: build backend
          working_directory: ./backend
          command: |
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run tests with JUnit
          working_directory: ./frontend
          command: npm run test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results

  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run tests with JUnit
          working_directory: ./backend
          command: npm run test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - store_artifacts:
          path: ./backend/test_results

  scan-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: |
            set +e
            npm audit fix --audit-level=critical --force
            # run again if still not fixed
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: scan backend against security vulnerabilities
          working_directory: ./backend
          command: |
            set +e
            npm audit fix --audit-level=critical --force
            # run again if still not fixed
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: [ "a8:96:02:c4:22:cd:bd:5c:41:0a:28:2a:67:13:86:8d:9b:a2:9f:4f" ]
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
      - run:
          name: Config server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yaml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  deploy-infrastructure:
    executor: aws
    steps:
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file backend.yaml \
              --stack-name "udapeople-be-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople-be-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Save BACKEND_URL in KVDB
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            curl https://kvdb.io/D3pG2H4NNFFoc5px1FoE9L/BACKEND_URL - d "http://$BACKEND_IP:3030"

      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yaml \
              --stack-name "udapeople-fe-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople-fe-${CIRCLE_WORKFLOW_ID}

      - run:
          name: Add backend IP to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-be-${CIRCLE_WORKFLOW_ID}" \
              --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
      - run:
          name: Send migration results to KVDB
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "Migration success, update kvdb"
              curl https://kvdb.io/D3pG2H4NNFFoc5px1FoE9L/migrateSuccess -d '1'
            else
              echo "Migration failed"
              curl https://kvdb.io/D3pG2H4NNFFoc5px1FoE9L/migrateSuccess -d '0'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID}"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  deploy-frontend:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(curl https://kvdb.io/D3pG2H4NNFFoc5px1FoE9L/BACKEND_URL)
            export BACKEND_URL="http://${BACKEND_IP}:3030"
            echo "${BACKEND_URL}"
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
            id: ${CIRCLE_WORKFLOW_ID}
            when: on_fail

  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "06:55:19:5c:75:9c:0c:fa:5e:f0:ed:c4:2b:35:ec:76" ]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Deploy backend
          command: |
            ansible-playbook -i inventory.txt deploy-server.yaml -vv
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  smoke-test:
    executor: python
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl aws-cli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_URL=$(curl https://kvdb.io/D3pG2H4NNFFoc5px1FoE9L/BACKEND_URL)
            curl "$BACKEND_URL/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3.us-east-1.amazonaws.com/index.html"
            curl ${URL}
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID}
          when: on_fail

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl https://kvdb.io/D3pG2H4NNFFoc5px1FoE9L/workflowid)
      - run:
          name: Remove old stacks and files
          command: |
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID}

            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-fe-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-be-${OldWorkflowID}"
            else
              echo "current workflow id: $OldWorkflowID. clean up not possible.
            fi

workflows:
  default:
    jobs:
      - setup-backend
      - setup-frontend
      - build-backend:
          requires:
            - setup-backend
      - build-frontend:
          requires:
            - setup-frontend
      - test-frontend:
          requires: [ build-frontend ]
      - test-backend:
          requires: [ build-backend ]
      - scan-backend:
          requires: [ build-backend ]
      - scan-frontend:
          requires: [ build-frontend ]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
      - run-migrations:
          requires: [ configure-infrastructure ]
      - deploy-frontend:
          requires: [ run-migrations ]
      - deploy-backend:
          requires: [ run-migrations ]
      - smoke-test:
          requires: [ deploy-backend, deploy-frontend ]
      - cloudfront-update:
          requires: [ smoke-test ]
      - cleanup:
          requires: [ cloudfront-update ]